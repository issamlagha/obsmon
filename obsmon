#!/usr/bin/env Rscript
# argv contains the raw vector of arguments passed to the script
# The parsing of the arguments will be performed later
argv <- commandArgs(trailingOnly = FALSE)

# Flagging whether that obsmon is being run as a standalone application, i.e.,
# not within a shiny server
runningAsStandalone <- TRUE

# Changing work dir to obsmonSrcDir, so all needed files can be found
dirObsmonWasCalledFrom <- getwd()
thisFilePath <- normalizePath(sub("--file=", "", argv[grep("--file=", argv)]))
# Accounting for the fact that the script may be executed via a symlink
obsmonSrcDir <- dirname(Sys.readlink(thisFilePath))
if(obsmonSrcDir=="" || anyNA(obsmonSrcDir)) obsmonSrcDir<-dirname(thisFilePath)
setwd(obsmonSrcDir)

## Make sure to read .Rprofile even when not running from location obsmonSrcDir
# This is important, e.g., for the libPaths
source(file.path(obsmonSrcDir, ".Rprofile"))

# Printing startup info such as code name, version and git info
source("src/src_info_obsmon.R")
cat(obsmonBanner)
cat("Initializing Obsmon...\n")

# Parsing command line arguments
suppressPackageStartupMessages(library(argparse))
cat('For a list of available options, please use the "-h" argument.\n\n')
parser <- ArgumentParser()
parser$add_argument("--batch", action="store_true", help="Run in batch mode")
parser$add_argument("--launch", action="store_true",
  help="Launch browser at startup. Does not apply when running in batch mode."
)
parser$add_argument('-pt', '--port', type="integer", default=5391,
  help=paste(
    'TCP port the app will listen to (default: 5391).',
    'If busy, the code will attempt to pick a valid port number randomly',
    'Does not apply when running in batch mode.'
  )
)
parser$add_argument(
  '-maxRetriesIfPortBusy', '--max-retries-if-tcp-port-busy', dest="maxTcpRetries",
  type="integer", default=9,
  help=paste(
    "Max number of times the app will try to find an available TCP port",
    "to listen to, if the initially picked one is busy.",
    'Does not apply when running in batch mode.'
  )
)
parser$add_argument("--debug", action="store_true", help="Run in debug mode")
cmdLineArgs <- parser$parse_args()

# Initialising the rest of the code
source("src/init.R")

status <- runObsmonStandAlone(cmdLineArgs)
